#!/work/bin/nawk -f
# ------------------------------------------------
# input.idx -- standardize input before sorting
# Author: Dale Dougherty
# Version 1.1
 7/10/90
#
# input is "entry" tab "page_number"
# ------------------------------------------------
BEGIN { FS = "\t"; OFS = ""}
#1 Match entries that need rotating that contain a single tilde
# $1 ~ /~[^~]/ # regex doesn't work, but work this $1 ~ /[^~]{^~}/
$1 ~ /~ / && $1 !~ /~~/ {
	#split first field into array named subfield
	n = split($1, subfield, "~")
	if( n == 2 ){
		#print entry without "~" and than rotated
		printf("%s %s::%s\n", subfield[1], subfield[2], $2)
		printf("%s:%s:%s\n", subfield[2], subfield[1], $2)
		}
		next
	}# End of 1 
#2 Match entries that contain two tildes
$1 ~ /~~ / {
	#replace ~~ with ~
	gsub(/~~ /, "~", $1)
} #End of 2
#3 Match entries that use "::" for literal ":".
$1 ~ /::/ {
	# substitute octal value for "::"
	gsub(/::/, "\\72", $1)
	}# End of 3
#4 Clean up entries
	{
		#look for second colon, which might be used instead of ";"
		if(sub(/:.*:/, "&", $1)) {
			sub(/:;/, ";", $1)
			}
		#remove blank space if any after colon
		sub(/: */, ":", $1)
		# if comma is used as delimiter, convert a colon.
		if( $1 !~ /:/ ) {
			# On see also & see, try to put delimiter before "("
			if ($1 ~ /\([sS]ee)/) {
				if(sub(/, *.*[\(]/, ":&", $1))
				   sub(/:, */, ":", $1)

				else
				   sub(/   *\(/, ":(", $1)
				}
			}
			else{ # otherwise, just look for comma
			       sub(/, */, ":", $1)
	        	}
		}
		#else {
			#added to insert semicolon in "See"
		#	if ($1 ~ /:[^;]+ *[\(][sS]ee/)
		#	    sub(/  *[^\(]/, ";[(]", $1)
		#	} #End of 4
		
